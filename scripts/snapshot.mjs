#!/usr/bin/env zx
import 'zx/globals'

function toValidPackageName(projectName) {
  return (
    projectName &&
    projectName
      .trim()
      .toLowerCase()
      .replace(/\s+/g, '-')
      .replace(/^[._]/, '')
      .replace(/[^a-z0-9-~]+/g, '-')
  );
}

$.verbose = false

if (!/pnpm/.test(process.env.npm_config_user_agent ?? ''))
  throw new Error("Please use pnpm ('pnpm run snapshot') to generate snapshots!")

const featureFlags = ['typescript', 'see', 'mirror-source']

// The following code & comments are generated by GitHub CoPilot.
function fullCombination(arr) {
  const combinations = []

  // for an array of 5 elements, there are 2^5 - 1= 31 combinations
  // (excluding the empty combination)
  // equivalent to the following:
  // [0, 0, 0, 0, 1] ... [1, 1, 1, 1, 1]
  // We can represent the combinations as a binary number
  // where each digit represents a flag
  // and the number is the index of the flag
  // e.g.
  // [0, 0, 0, 0, 1] = 0b0001
  // [1, 1, 1, 1, 1] = 0b1111

  // Note we need to exclude the empty combination in our case
  for (let i = 1; i < 1 << arr.length; i++) {
    const combination = []
    for (let j = 0; j < arr.length; j++) {
      if (i & (1 << j)) {
        combination.push(arr[j])
      }
    }
    combinations.push(combination)
  }

  return combinations
}

const flagCombinations = fullCombination(featureFlags)
flagCombinations.push(['default'])

// mini
const flagMiniCombinations = [['framework=mini'], ['framework=mini', 'miniFramework=hola'], ['framework=mini', 'miniFramework=hola']];

// v3
const flagV3Combinations = [
  ['framework=v3', 'application=mobile', 'buildTools=bundle', 'uiFramework=wui'], ['framework=v3', 'application=offline', 'buildTools=vite', 'uiFramework=vant'], ['framework=v3', 'application=pc', 'buildTools=bundle', 'uiFramework=element-ui']];

// subsystem
const flagSubsystemCombinations = [
  ['framework=v2', 'application=pc', 'buildTools=bundle', 'uiFramework=hui', 'ms', 'see', 'microFrontType=hui1.0']];

let hasFile = fs.existsSync(path.join(__dirname, `../playground`))
// 创建 playground
if (!hasFile) await $`mkdir playground`
const playgroundDir = path.resolve(__dirname, '../playground/')
const bin = path.posix.relative('../playground/', '../outfile.cjs')

async function generateProject(combinations) {
  for (const flags of combinations) {
    const flagsTemp = flags.map((item) => toValidPackageName(item))

    const projectName = flagsTemp.join('-')

    console.log(`Removing previously generated project ${projectName}`)
    await $`rm -rf ${projectName}`

    console.log(`Creating project ${projectName}`)

    await $`node ${[bin, projectName, ...flags.map((flag) => `--${flag}`), '--force']}`
  }
}

cd(playgroundDir)

// v2
await generateProject(flagCombinations)
// mini
await generateProject(flagMiniCombinations)
// v3
await generateProject(flagV3Combinations)
// subsystem
await generateProject(flagSubsystemCombinations)
